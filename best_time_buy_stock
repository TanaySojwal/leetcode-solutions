// Brute force Solution

class Solution {
    public int maxProfit(int[] prices) {
        return calculate(prices, 0);
    }
    
    private int calculate(int[] prices, int s) {
        if (s >= prices.length) {
            return 0;
        }
        int max = 0;
        for (int start = 0; start < prices.length; start++) {
            int maxProfit = 0;
            for (int i = start + 1; i < prices.length; i++) {
                if (prices[i] > prices[start]) {
                    profit = calculate(prices, i + 1) + prices[i] - prices[start];
                    if (profit > maxProfit) maxProfit = profit;
                }
            }
            if (maxProfit > max) max = maxProfit;
        }
        return max;
    }
}

// Peak valley approach
// Intuition here was to find all local valleys & peaks
// and sum their diffs to maximize profit

class Solution {
    public int maxProfit(int[] prices) {
        int i = 0;
        int valley = prices[0];
        int peak = prices[0];
        int maxProfit = 0;
        while (i < prices.length - 1) {
            // Finding local valley
            while (i < prices.length - 1 && prices[i] >= prices[i + 1])
                i++;
            valley = prices[i];
            // Finding local peak
            while (i < prices.length - 1 && prices[i] <= prices[i + 1])
                i++;
            peak = prices[i];
            maxProfit += (peak - valley);
        }
        return maxProfit;
    }
}