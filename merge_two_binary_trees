/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/*
Pseudocode

1. 
*/
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if (root1 == null && root2 != null)
            root1 = new TreeNode(root2.val);
        else if (root1 != null && root2 == null)
            return root1;
        else if (root1 == null && root2 == null)
            return root1;
        else if (root1 != null && root2 != null)
            root1.val = root1.val + root2.val;
        
        if (root1.left == null && root2.left != null)
            root1.left = new TreeNode(0);
        if (root1.right == null && root2.right != null)
            root1.right = new TreeNode(0);
        if (root1.left != null && root2.left != null)
            mergeTrees(root1.left, root2.left);
        if (root1.right != null && root2.right != null)
            mergeTrees(root1.right, root2.right);
        return root1;
    }
}